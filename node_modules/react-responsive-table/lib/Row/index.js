'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactStyleProptype = require('react-style-proptype');

var _reactStyleProptype2 = _interopRequireDefault(_reactStyleProptype);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Row = function Row(props, context) {
  var material = props.material,
      header = props.header;

  var children = props.children;
  if (Array.isArray(children)) {
    children = Array.prototype.concat.apply([], children);
    children = children.map(function (child) {
      return _react2.default.cloneElement(child, { material: material, header: header });
    });
  }
  return _react2.default.createElement(
    'div',
    { style: Row.getStyles(props, context) },
    children
  );
};

/* eslint-disable react/no-unused-prop-types */
Row.propTypes = {
  style: _reactStyleProptype2.default,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
  striped: _propTypes2.default.bool,
  header: _propTypes2.default.bool,
  material: _propTypes2.default.bool,
  index: _propTypes2.default.number
};

Row.contextTypes = {
  muiTheme: _propTypes2.default.object
};

Row.defaultProps = {
  material: false,
  style: {},
  children: null,
  striped: false,
  header: false,
  index: null
};

Row.getStyles = function (props, context) {
  var style = {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    flexGrow: 0,
    width: '100%'
  };
  if (props.material && context.muiTheme) {
    var _context$muiTheme = context.muiTheme,
        tableRow = _context$muiTheme.tableRow,
        tableHeader = _context$muiTheme.tableHeader;

    style = Object.assign(style, {
      borderBottom: props.displayBorder && '1px solid ' + tableRow.borderColor,
      color: tableRow.textColor
    });
    if (props.header) {
      style.borderBottom = '1px solid ' + tableHeader.borderColor;
    }
    if (props.striped && (props.index || props.index === 0) && props.index % 2 === 0) {
      style.backgroundColor = context.muiTheme.tableRow.stripeColor;
    }
    style.minHeight = context.muiTheme.tableRow.height;
  }
  style = Object.assign(style, props.style);
  return style;
};

exports.default = Row;