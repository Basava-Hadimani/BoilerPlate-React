'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactStyleProptype = require('react-style-proptype');

var _reactStyleProptype2 = _interopRequireDefault(_reactStyleProptype);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Cell = function Cell(props, context) {
  var children = props.children;

  var innerDivStyle = Object.assign({ margin: 'auto' }, props.style);
  return _react2.default.createElement(
    'div',
    { style: Cell.getStyles(props, context) },
    _react2.default.createElement(
      'div',
      { style: innerDivStyle },
      children
    )
  );
};

/* eslint-disable react/no-unused-prop-types */
Cell.propTypes = {
  minWidthPx: _propTypes2.default.number,
  style: _reactStyleProptype2.default,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
  header: _propTypes2.default.bool,
  material: _propTypes2.default.bool
};

Cell.contextTypes = {
  muiTheme: _propTypes2.default.object
};

Cell.defaultProps = {
  material: false,
  style: {},
  children: null,
  header: false,
  minWidthPx: null
};

Cell.getStyles = function (props, context) {
  var style = {
    display: 'flex',
    flexGrow: 1,
    overflow: 'hidden',
    verticalAlign: 'middle',
    textOverflow: 'ellipsis'
  };
  if (props.material && context.muiTheme) {
    var _context$muiTheme = context.muiTheme,
        tableRowColumn = _context$muiTheme.tableRowColumn,
        tableHeaderColumn = _context$muiTheme.tableHeaderColumn;

    style = Object.assign(style, {
      paddingLeft: tableRowColumn.spacing,
      paddingRight: tableRowColumn.spacing,
      minHeight: tableRowColumn.height,
      textAlign: 'left'
    });
    if (props.header) {
      style = Object.assign(style, { fontWeight: 'normal',
        fontSize: 12,
        color: tableHeaderColumn.textColor,
        position: 'relative'
      });
    } else {
      style = Object.assign(style, {
        fontSize: 13,
        overflow: 'hidden'
      });
    }
  }
  if (props.minWidthPx) {
    style.width = props.minWidthPx + 'px';
  }
  return style;
};

exports.default = Cell;